import { useState } from 'react';

interface TranzilaPaymentFormProps {
  onPaymentSuccess: (paymentDetails: {
    cardNumber: string;
    expMonth: string;
    expYear: string;
    cvv: string;
    holderId?: string;
    name: string;
    email: string;
    phone: string;
  }) => void;
  onPaymentError: (error: string) => void;
}

export default function TranzilaPaymentForm({ onPaymentSuccess, onPaymentError }: TranzilaPaymentFormProps) {
  const [cardNumber, setCardNumber] = useState('');
  const [expMonth, setExpMonth] = useState('');
  const [expYear, setExpYear] = useState('');
  const [cvv, setCvv] = useState('');
  const [holderId, setHolderId] = useState('');
  const [name, setName] = useState('');
  const [email, setEmail] = useState('');
  const [phone, setPhone] = useState('');
  const [loading, setLoading] = useState(false);

  const handleSubmit = async (event: React.FormEvent) => {
    event.preventDefault();
    
    // Basic validation
    if (!cardNumber || !expMonth || !expYear || !cvv || !name || !email || !phone) {
      onPaymentError('Please fill in all required fields');
      return;
    }
    
    // Validate card number (simple check)
    if (!/^\d{16}$/.test(cardNumber.replace(/\s/g, ''))) {
      onPaymentError('Invalid card number');
      return;
    }
    
    // Validate expiration date
    if (!/^\d{2}$/.test(expMonth) || parseInt(expMonth) < 1 || parseInt(expMonth) > 12) {
      onPaymentError('Invalid expiration month');
      return;
    }
    
    if (!/^\d{2}$/.test(expYear)) {
      onPaymentError('Invalid expiration year');
      return;
    }
    
    // Validate CVV
    if (!/^\d{3,4}$/.test(cvv)) {
      onPaymentError('Invalid CVV');
      return;
    }
    
    // Validate email
    if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email)) {
      onPaymentError('Invalid email address');
      return;
    }
    
    setLoading(true);
    
    try {
      // Pass the card details to the parent component
      onPaymentSuccess({
        cardNumber: cardNumber.replace(/\s/g, ''),
        expMonth,
        expYear,
        cvv,
        holderId: holderId || undefined,
        name,
        email,
        phone,
      });
    } catch (error: any) {
      onPaymentError(error.message || 'An unexpected error occurred');
    } finally {
      setLoading(false);
    }
  };

  // Format card number with spaces for better readability
  const formatCardNumber = (value: string) => {
    const v = value.replace(/\s+/g, '').replace(/[^0-9]/gi, '');
    const matches = v.match(/\d{4,16}/g);
    const match = (matches && matches[0]) || '';
    const parts = [];
    
    for (let i = 0, len = match.length; i < len; i += 4) {
      parts.push(match.substring(i, i + 4));
    }
    
    if (parts.length) {
      return parts.join(' ');
    } else {
      return value;
    }
  };

  return (
    <form onSubmit={handleSubmit}>
      <div className="mb-4">
        <label className="block text-gray-700 font-medium mb-2">
          Card Holder Name*
        </label>
        <input
          type="text"
          value={name}
          onChange={(e) => setName(e.target.value)}
          className="w-full border border-gray-300 rounded-md p-2"
          placeholder="Full Name"
          required
        />
      </div>
      
      <div className="mb-4">
        <label className="block text-gray-700 font-medium mb-2">
          Email*
        </label>
        <input
          type="email"
          value={email}
          onChange={(e) => setEmail(e.target.value)}
          className="w-full border border-gray-300 rounded-md p-2"
          placeholder="email@example.com"
          required
        />
      </div>
      
      <div className="mb-4">
        <label className="block text-gray-700 font-medium mb-2">
          Phone*
        </label>
        <input
          type="tel"
          value={phone}
          onChange={(e) => setPhone(e.target.value)}
          className="w-full border border-gray-300 rounded-md p-2"
          placeholder="+1234567890"
          required
        />
      </div>
      
      <div className="mb-4">
        <label className="block text-gray-700 font-medium mb-2">
          Card Number*
        </label>
        <input
          type="text"
          value={cardNumber}
          onChange={(e) => setCardNumber(formatCardNumber(e.target.value))}
          className="w-full border border-gray-300 rounded-md p-2"
          placeholder="1234 5678 9012 3456"
          maxLength={19}
          required
        />
      </div>
      
      <div className="flex mb-4 space-x-4">
        <div className="w-1/3">
          <label className="block text-gray-700 font-medium mb-2">
            Month*
          </label>
          <input
            type="text"
            value={expMonth}
            onChange={(e) => setExpMonth(e.target.value.replace(/\D/g, '').slice(0, 2))}
            className="w-full border border-gray-300 rounded-md p-2"
            placeholder="MM"
            maxLength={2}
            required
          />
        </div>
        
        <div className="w-1/3">
          <label className="block text-gray-700 font-medium mb-2">
            Year*
          </label>
          <input
            type="text"
            value={expYear}
            onChange={(e) => setExpYear(e.target.value.replace(/\D/g, '').slice(0, 2))}
            className="w-full border border-gray-300 rounded-md p-2"
            placeholder="YY"
            maxLength={2}
            required
          />
        </div>
        
        <div className="w-1/3">
          <label className="block text-gray-700 font-medium mb-2">
            CVV*
          </label>
          <input
            type="text"
            value={cvv}
            onChange={(e) => setCvv(e.target.value.replace(/\D/g, '').slice(0, 4))}
            className="w-full border border-gray-300 rounded-md p-2"
            placeholder="123"
            maxLength={4}
            required
          />
        </div>
      </div>
      
      <div className="mb-6">
        <label className="block text-gray-700 font-medium mb-2">
          ID Number (Optional)
        </label>
        <input
          type="text"
          value={holderId}
          onChange={(e) => setHolderId(e.target.value.replace(/\D/g, ''))}
          className="w-full border border-gray-300 rounded-md p-2"
          placeholder="ID Number"
        />
      </div>
      
      <button
        type="submit"
        disabled={loading}
        className="w-full bg-blue-600 text-white py-2 px-4 rounded-md hover:bg-blue-700 transition duration-300 font-medium disabled:opacity-50"
      >
        {loading ? 'Processing...' : 'Pay Now'}
      </button>
    </form>
  );
} 